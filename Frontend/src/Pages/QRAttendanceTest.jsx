import React, { useState, useRef } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Alert,
  Paper,
  Stack,
  Chip,
  Divider
} from '@mui/material';
import {
  QrCode as QrCodeIcon,
  QrCodeScanner as QrCodeScannerIcon,
  PlayArrow as PlayArrowIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Visibility as VisibilityIcon
} from '@mui/icons-material';
import QRCode from 'react-qr-code';
import { format, addMinutes } from 'date-fns';
import QRAttendanceModal from '../Components/QR/QRAttendanceModal';

const QRAttendanceTest = () => {
  const [step, setStep] = useState(1);
  const [testQRData, setTestQRData] = useState(null);
  const [scanResult, setScanResult] = useState(null);
  const [attendanceResult, setAttendanceResult] = useState(null);
  const attendanceModalRef = useRef(null);

  // Initialize attendance modal
  React.useEffect(() => {
    attendanceModalRef.current = new QRAttendanceModal();
  }, []);

  // Step 1: Generate Test QR Code
  const generateTestQR = () => {
    const timestamp = Date.now();
    const qrId = `test_attendance_${timestamp}`;
    const expiresAt = addMinutes(new Date(timestamp), 10); // 10 minutes for testing

    const qrData = {
      id: qrId,
      type: 'attendance_check',
      timestamp: timestamp,
      expiresAt: expiresAt.toISOString(),
      checksum: btoa(`${qrId}_${timestamp}`),
      location: 'test_location',
      // Enhanced attendance configuration
      attendanceConfig: {
        showForm: true,
        formType: 'swal_modal',
        autoSubmit: false,
        requiredFields: ['name', 'email', 'studentId'],
        optionalFields: ['phone', 'organization', 'position', 'notes'],
        enableGeolocation: true,
        showSuccessFeedback: true,
        sessionTitle: `Test Session - ${format(new Date(timestamp), 'MMM dd, yyyy HH:mm')}`
      },
      // Test user identity
      user: {
        userId: 'test-admin-001',
        username: 'test-admin',
        email: 'admin@test.com',
        role: 'admin',
        studentId: null,
        firstName: 'Test',
        lastName: 'Administrator',
        fullName: 'Test Administrator',
        department: 'IT Department',
        hasStudentRecord: false
      },
      // Generated by info
      generatedBy: {
        username: 'test-admin',
        email: 'admin@test.com',
        role: 'admin',
        timestamp: new Date(timestamp).toISOString()
      }
    };

    setTestQRData(qrData);
    setStep(2);
    console.log('✅ Test QR code generated:', qrData);
  };

  // Step 2: Simulate QR Scan and Show Form
  const simulateQRScan = async () => {
    if (!testQRData) return;

    setStep(3);
    setScanResult('QR Code Scanned Successfully!');

    // Simulate scanning the QR code and showing the form modal
    try {
      await attendanceModalRef.current.showAttendanceForm(
        testQRData,
        (responseData) => {
          // Success callback
          console.log('✅ Test attendance recorded successfully:', responseData);
          setAttendanceResult({
            success: true,
            message: 'Attendance recorded successfully!',
            data: responseData
          });
          setStep(4);
        },
        (error) => {
          // Error callback
          console.error('❌ Test attendance error:', error);
          setAttendanceResult({
            success: false,
            message: typeof error === 'string' ? error : 'Failed to record attendance',
            error: error
          });
          setStep(4);
        }
      );
    } catch (error) {
      console.error('Error in test flow:', error);
      setAttendanceResult({
        success: false,
        message: 'Error showing attendance form',
        error: error.message
      });
      setStep(4);
    }
  };

  // Reset test
  const resetTest = () => {
    setStep(1);
    setTestQRData(null);
    setScanResult(null);
    setAttendanceResult(null);
  };

  return (
    <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>
      {/* Header */}
      <Paper sx={{ mb: 4, p: 3, bgcolor: 'primary.main', color: 'white' }}>
        <Typography variant="h4" component="h1" sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
          <QrCodeIcon sx={{ fontSize: 40 }} />
          QR Attendance System Test
        </Typography>
        <Typography variant="body1" sx={{ opacity: 0.9 }}>
          Test the complete flow: QR Generation → Scanning → SweetAlert2 Form → Attendance Submission → Success Feedback
        </Typography>
      </Paper>

      {/* Progress Steps */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {[
          { step: 1, title: 'Generate QR', icon: <QrCodeIcon /> },
          { step: 2, title: 'Scan QR Code', icon: <QrCodeScannerIcon /> },
          { step: 3, title: 'Fill Form', icon: <VisibilityIcon /> },
          { step: 4, title: 'Get Feedback', icon: <CheckCircleIcon /> }
        ].map((item) => (
          <Grid item xs={12} sm={3} key={item.step}>
            <Card sx={{ 
              bgcolor: step >= item.step ? 'primary.main' : 'grey.100', 
              color: step >= item.step ? 'white' : 'text.secondary',
              transition: 'all 0.3s ease'
            }}>
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                {React.cloneElement(item.icon, { sx: { fontSize: 32, mb: 1 } })}
                <Typography variant="subtitle2">{item.title}</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Step Content */}
      <Grid container spacing={3}>
        {/* Step 1: Generate QR Code */}
        {step === 1 && (
          <Grid item xs={12}>
            <Card>
              <CardContent sx={{ textAlign: 'center', p: 4 }}>
                <QrCodeIcon sx={{ fontSize: 80, color: 'primary.main', mb: 3 }} />
                <Typography variant="h5" gutterBottom>
                  Step 1: Generate Test QR Code
                </Typography>
                <Typography variant="body1" color="text.secondary" paragraph>
                  Generate a test QR code with enhanced attendance configuration that will trigger the SweetAlert2 form when scanned.
                </Typography>
                <Button
                  variant="contained"
                  size="large"
                  startIcon={<PlayArrowIcon />}
                  onClick={generateTestQR}
                  sx={{ mt: 2 }}
                >
                  Generate Test QR Code
                </Button>
              </CardContent>
            </Card>
          </Grid>
        )}

        {/* Step 2: Show Generated QR Code */}
        {step === 2 && testQRData && (
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <QrCodeIcon color="primary" />
                  Step 2: QR Code Generated - Ready to Scan
                </Typography>
                
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'white', border: '3px solid', borderColor: 'success.main' }}>
                      <QRCode
                        value={JSON.stringify(testQRData)}
                        size={200}
                        level="M"
                        includeMargin={true}
                      />
                      <Typography variant="caption" display="block" sx={{ mt: 2, color: 'text.secondary' }}>
                        Test QR Code ID: {testQRData.id}
                      </Typography>
                    </Paper>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Stack spacing={2}>
                      <Alert severity="success">
                        <Typography variant="subtitle2">QR Code Generated Successfully!</Typography>
                        <Typography variant="body2">
                          This QR code contains enhanced attendance configuration and will show a SweetAlert2 form when scanned.
                        </Typography>
                      </Alert>
                      
                      <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>
                        <Typography variant="subtitle2" gutterBottom>QR Code Features:</Typography>
                        <Stack spacing={1}>
                          <Chip size="small" label="✅ SweetAlert2 Form Enabled" color="success" />
                          <Chip size="small" label="✅ User Identity Embedded" color="info" />
                          <Chip size="small" label="✅ Geolocation Support" color="warning" />
                          <Chip size="small" label="✅ Success Feedback" color="primary" />
                        </Stack>
                      </Paper>
                      
                      <Button
                        variant="contained"
                        size="large"
                        startIcon={<QrCodeScannerIcon />}
                        onClick={simulateQRScan}
                        fullWidth
                      >
                        Simulate QR Code Scan
                      </Button>
                    </Stack>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        )}

        {/* Step 3: Scanning in Progress */}
        {step === 3 && (
          <Grid item xs={12}>
            <Card>
              <CardContent sx={{ textAlign: 'center', p: 4 }}>
                <QrCodeScannerIcon sx={{ fontSize: 80, color: 'warning.main', mb: 3 }} />
                <Typography variant="h5" gutterBottom>
                  Step 3: QR Code Scanned!
                </Typography>
                <Typography variant="body1" color="text.secondary" paragraph>
                  The QR code has been scanned and the SweetAlert2 attendance form should appear.
                  Fill in the form to complete the attendance registration.
                </Typography>
                <Alert severity="info" sx={{ mt: 2 }}>
                  <Typography variant="body2">
                    📋 The attendance form modal should be displayed now. Complete the form to proceed to the next step.
                  </Typography>
                </Alert>
              </CardContent>
            </Card>
          </Grid>
        )}

        {/* Step 4: Results */}
        {step === 4 && attendanceResult && (
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  {attendanceResult.success ? (
                    <CheckCircleIcon color="success" />
                  ) : (
                    <ErrorIcon color="error" />
                  )}
                  Step 4: {attendanceResult.success ? 'Success!' : 'Error Occurred'}
                </Typography>
                
                <Alert 
                  severity={attendanceResult.success ? 'success' : 'error'} 
                  sx={{ mb: 3 }}
                >
                  <Typography variant="subtitle2" gutterBottom>
                    {attendanceResult.message}
                  </Typography>
                  {attendanceResult.success && attendanceResult.data && (
                    <Typography variant="body2">
                      🎉 Attendance has been successfully recorded in the system!
                    </Typography>
                  )}
                </Alert>

                {attendanceResult.success && attendanceResult.data && (
                  <Paper sx={{ p: 3, bgcolor: 'success.50', border: '1px solid', borderColor: 'success.200' }}>
                    <Typography variant="subtitle1" gutterBottom sx={{ color: 'success.800' }}>
                      📊 Attendance Details:
                    </Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={12} sm={6}>
                        <Typography variant="body2">
                          <strong>Student ID:</strong> {attendanceResult.data.studentId}
                        </Typography>
                        <Typography variant="body2">
                          <strong>Status:</strong> Present
                        </Typography>
                        <Typography variant="body2">
                          <strong>Method:</strong> QR Code Scan
                        </Typography>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <Typography variant="body2">
                          <strong>Date:</strong> {new Date().toLocaleDateString()}
                        </Typography>
                        <Typography variant="body2">
                          <strong>Time:</strong> {new Date().toLocaleTimeString()}
                        </Typography>
                        {attendanceResult.data.attendanceId && (
                          <Typography variant="body2">
                            <strong>Reference:</strong> {String(attendanceResult.data.attendanceId).slice(-8)}
                          </Typography>
                        )}
                      </Grid>
                    </Grid>
                  </Paper>
                )}

                <Box sx={{ mt: 3, textAlign: 'center' }}>
                  <Button
                    variant="outlined"
                    size="large"
                    onClick={resetTest}
                    sx={{ mr: 2 }}
                  >
                    Reset Test
                  </Button>
                  <Button
                    variant="contained"
                    size="large"
                    onClick={() => window.location.reload()}
                  >
                    Refresh Page
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
      </Grid>

      {/* Instructions */}
      <Paper sx={{ mt: 4, p: 3, bgcolor: 'grey.50' }}>
        <Typography variant="h6" gutterBottom>
          🧪 Test Instructions:
        </Typography>
        <Stack spacing={1}>
          <Typography variant="body2">
            1. <strong>Generate QR Code:</strong> Click the button to create a test QR code with enhanced attendance features
          </Typography>
          <Typography variant="body2">
            2. <strong>Simulate Scan:</strong> Click "Simulate QR Code Scan" to trigger the attendance form modal
          </Typography>
          <Typography variant="body2">
            3. <strong>Fill Form:</strong> Complete the SweetAlert2 form that appears with test data
          </Typography>
          <Typography variant="body2">
            4. <strong>View Results:</strong> See the success feedback and attendance confirmation
          </Typography>
        </Stack>
        
        <Divider sx={{ my: 2 }} />
        
        <Typography variant="subtitle2" gutterBottom>
          💡 What This Tests:
        </Typography>
        <Stack spacing={0.5}>
          <Typography variant="body2">• QR code generation with attendance configuration</Typography>
          <Typography variant="body2">• SweetAlert2 modal form display and validation</Typography>
          <Typography variant="body2">• Backend attendance submission and processing</Typography>
          <Typography variant="body2">• Success feedback and confirmation display</Typography>
          <Typography variant="body2">• Complete end-to-end attendance flow</Typography>
        </Stack>
      </Paper>
    </Box>
  );
};

export default QRAttendanceTest;
