import React from 'react';
import Swal from 'sweetalert2';
import axios from 'axios';
import '../../styles/sweetalert-custom.css';

class QRAttendanceModal {
  constructor() {
    this.apiBaseUrl = import.meta.env.VITE_BACKEND_URL || 'http://localhost:5000';
  }

  /**
   * Show attendance form modal when QR code is scanned
   * @param {Object} qrData - QR code data containing attendance information
   * @param {Function} onSuccess - Callback when attendance is successfully recorded
   * @param {Function} onError - Callback when there's an error
   */
  async showAttendanceForm(qrData, onSuccess, onError) {
    try {
      // Validate QR data first
      if (!qrData || !this.isValidAttendanceQR(qrData)) {
        await this.showErrorAlert('Invalid QR Code', 'This QR code is not valid for attendance tracking.');
        onError?.('Invalid QR data');
        return;
      }

      // Check if QR code has expired
      if (this.isExpired(qrData)) {
        await this.showErrorAlert('Expired QR Code', 'This QR code has expired. Please scan a new one.');
        onError?.('QR code expired');
        return;
      }

      // Show the attendance form
      const formResult = await this.displayAttendanceForm(qrData);
      
      if (formResult.isConfirmed && formResult.value) {
        await this.submitAttendance(qrData, formResult.value, onSuccess, onError);
      } else {
        onError?.('Form cancelled');
      }
    } catch (error) {
      console.error('Error showing attendance form:', error);
      await this.showErrorAlert('Error', 'Unable to display attendance form. Please try again.');
      onError?.(error.message);
    }
  }

  /**
   * Display the attendance form using SweetAlert2
   */
  async displayAttendanceForm(qrData) {
    return await Swal.fire({
      title: '📝 Register Attendance',
      html: this.createFormHTML(qrData),
      width: '600px',
      showCancelButton: true,
      confirmButtonText: '✅ Record Attendance',
      cancelButtonText: '❌ Cancel',
      customClass: {
        popup: 'swal-wide',
        confirmButton: 'swal-confirm-attendance',
        cancelButton: 'swal-cancel-button'
      },
      focusConfirm: false,
      allowOutsideClick: false,
      allowEscapeKey: false,
      showLoaderOnConfirm: true,
      preConfirm: () => {
        return this.validateAndGetFormData();
      }
    });
  }

  /**
   * Create HTML form for attendance registration
   */
  createFormHTML(qrData) {
    return `
      <div style="text-align: left; padding: 10px;">
        <!-- Session Info -->
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; text-align: center;">
          <h4 style="margin: 0 0 10px 0; color: #2196f3;">
            🎯 ${qrData.sessionTitle || 'Attendance Session'}
          </h4>
          <p style="margin: 5px 0; color: #666; font-size: 14px;">
            📅 ${new Date().toLocaleDateString()} | ⏰ ${new Date().toLocaleTimeString()}
          </p>
          ${qrData.generatedBy ? `<p style="margin: 5px 0; color: #666; font-size: 12px;">Generated by: ${qrData.generatedBy.username}</p>` : ''}
        </div>

        <!-- Required Fields -->
        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
            👤 Full Name <span style="color: red;">*</span>
          </label>
          <input 
            id="swal-name" 
            type="text" 
            placeholder="Enter your full name" 
            style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box;"
            required
          />
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
            📧 Email Address <span style="color: red;">*</span>
          </label>
          <input 
            id="swal-email" 
            type="email" 
            placeholder="Enter your email address" 
            style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box;"
            required
          />
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
            🆔 Student/Employee ID <span style="color: red;">*</span>
          </label>
          <input 
            id="swal-student-id" 
            type="text" 
            placeholder="Enter your ID number" 
            style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box;"
            required
          />
        </div>

        <!-- Optional Fields -->
        <div style="border-top: 1px solid #eee; padding-top: 15px; margin-top: 20px;">
          <h5 style="margin: 0 0 15px 0; color: #666;">Optional Information</h5>
          
          <div style="margin-bottom: 15px;">
            <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
              📞 Phone Number
            </label>
            <input 
              id="swal-phone" 
              type="tel" 
              placeholder="Enter your phone number" 
              style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box;"
            />
          </div>

          <div style="margin-bottom: 15px;">
            <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
              🏢 Organization/Department
            </label>
            <input 
              id="swal-organization" 
              type="text" 
              placeholder="Your organization or department" 
              style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box;"
            />
          </div>

          <div style="margin-bottom: 15px;">
            <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
              💼 Position/Role
            </label>
            <input 
              id="swal-position" 
              type="text" 
              placeholder="Your position or role" 
              style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box;"
            />
          </div>

          <div style="margin-bottom: 20px;">
            <label style="display: block; font-weight: bold; margin-bottom: 5px; color: #333;">
              📝 Additional Notes
            </label>
            <textarea 
              id="swal-notes" 
              placeholder="Any additional information (optional)" 
              style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; min-height: 80px; box-sizing: border-box; resize: vertical;"
            ></textarea>
          </div>
        </div>

        <!-- Terms and Conditions -->
        <div style="background: #f0f8f0; padding: 15px; border-radius: 6px; margin-bottom: 10px; border: 1px solid #d4edda;">
          <label style="display: flex; align-items: flex-start; cursor: pointer; font-size: 14px; color: #333;">
            <input 
              id="swal-terms" 
              type="checkbox" 
              style="margin-right: 10px; margin-top: 3px; transform: scale(1.2);" 
              required
            />
            <span>
              I agree to the collection and processing of my personal information for attendance tracking purposes. 
              <strong>This information will be used solely for attendance records and event management.</strong>
            </span>
          </label>
        </div>

        <div style="text-align: center; font-size: 12px; color: #888; margin-top: 15px;">
          🔒 Your information is secure and will not be shared with third parties.
        </div>
      </div>
    `;
  }

  /**
   * Validate form data and return collected values
   */
  validateAndGetFormData() {
    const name = document.getElementById('swal-name').value.trim();
    const email = document.getElementById('swal-email').value.trim();
    const studentId = document.getElementById('swal-student-id').value.trim();
    const phone = document.getElementById('swal-phone').value.trim();
    const organization = document.getElementById('swal-organization').value.trim();
    const position = document.getElementById('swal-position').value.trim();
    const notes = document.getElementById('swal-notes').value.trim();
    const termsAccepted = document.getElementById('swal-terms').checked;

    // Validation
    if (!name) {
      Swal.showValidationMessage('Please enter your full name');
      return false;
    }

    if (!email) {
      Swal.showValidationMessage('Please enter your email address');
      return false;
    }

    if (!this.isValidEmail(email)) {
      Swal.showValidationMessage('Please enter a valid email address');
      return false;
    }

    if (!studentId) {
      Swal.showValidationMessage('Please enter your Student/Employee ID');
      return false;
    }

    if (!termsAccepted) {
      Swal.showValidationMessage('Please accept the terms and conditions');
      return false;
    }

    return {
      name,
      email,
      studentId,
      phone,
      organization,
      position,
      notes,
      termsAccepted,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * Submit attendance data to backend
   */
  async submitAttendance(qrData, formData, onSuccess, onError) {
    try {
      // Show loading state
      Swal.fire({
        title: '📡 Recording Attendance...',
        html: 'Please wait while we record your attendance.',
        timerProgressBar: true,
        didOpen: () => {
          Swal.showLoading();
        },
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false
      });

      // Get user location if available
      let userLocation = null;
      if (navigator.geolocation) {
        try {
          const position = await this.getUserLocation();
          userLocation = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            accuracy: position.coords.accuracy,
            timestamp: new Date().toISOString()
          };
        } catch (locationError) {
          console.warn('Could not get user location:', locationError);
        }
      }

      // Prepare attendance data
      const attendanceData = {
        // QR code related data
        qrCodeData: qrData,
        qrCodeString: JSON.stringify(qrData),
        
        // Student/User information
        studentId: formData.studentId,
        scannedBy: {
          studentId: formData.studentId,
          username: formData.name,
          email: formData.email
        },
        
        // Form data
        name: formData.name,
        email: formData.email,
        phoneNumber: formData.phone,
        organization: formData.organization,
        position: formData.position,
        notes: formData.notes,
        
        // Location data
        userLocation: userLocation,
        scannerLocation: qrData.location ? {
          coordinates: qrData.location
        } : null,
        
        // Metadata
        scannedAt: new Date().toISOString(),
        attendanceType: 'qr_scan',
        deviceInfo: this.getDeviceInfo()
      };

      // Submit to backend
      const response = await axios.post(`${this.apiBaseUrl}/api/attendance/qr-location`, attendanceData);

      if (response.data.success) {
        await this.showSuccessAlert(formData.name, response.data);
        onSuccess?.(response.data);
      } else {
        throw new Error(response.data.error || 'Failed to record attendance');
      }

    } catch (error) {
      console.error('Error submitting attendance:', error);
      
      let errorMessage = 'Failed to record attendance. Please try again.';
      
      if (error.response?.status === 409) {
        errorMessage = 'You have already registered attendance for this session.';
      } else if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      }

      await this.showErrorAlert('Recording Failed', errorMessage);
      onError?.(error);
    }
  }

  /**
   * Show success alert with attendance confirmation
   */
  async showSuccessAlert(name, responseData) {
    return await Swal.fire({
      icon: 'success',
      title: '🎉 Attendance Recorded Successfully!',
      html: `
        <div style="text-align: center; padding: 20px;">
          <div style="background: #e8f5e8; padding: 20px; border-radius: 12px; margin: 20px 0; border: 2px solid #4caf50;">
            <h3 style="margin: 0 0 15px 0; color: #2e7d32;">
              ✅ Welcome, ${name}!
            </h3>
            <p style="margin: 10px 0; color: #4caf50; font-size: 18px; font-weight: bold;">
              Your attendance has been successfully recorded.
            </p>
            <div style="background: white; padding: 15px; border-radius: 8px; margin-top: 15px; text-align: left;">
              <p style="margin: 5px 0; color: #333;"><strong>📅 Date:</strong> ${new Date().toLocaleDateString()}</p>
              <p style="margin: 5px 0; color: #333;"><strong>⏰ Time:</strong> ${new Date().toLocaleTimeString()}</p>
              <p style="margin: 5px 0; color: #333;"><strong>📊 Status:</strong> Present</p>
              ${responseData.attendanceId ? `<p style="margin: 5px 0; color: #333;"><strong>🆔 Reference:</strong> ${String(responseData.attendanceId).slice(-8)}</p>` : ''}
            </div>
          </div>
          <div style="background: #f0f8f0; padding: 15px; border-radius: 8px; margin-top: 20px; font-size: 14px; color: #666;">
            <p style="margin: 0;">
              📧 A confirmation will be sent to your email address if provided.
              Thank you for attending!
            </p>
          </div>
        </div>
      `,
      width: '500px',
      confirmButtonText: '🎯 Great, Thanks!',
      customClass: {
        confirmButton: 'swal-success-button'
      },
      timer: 8000,
      timerProgressBar: true
    });
  }

  /**
   * Show error alert
   */
  async showErrorAlert(title, message) {
    return await Swal.fire({
      icon: 'error',
      title: title,
      text: message,
      confirmButtonText: 'OK',
      customClass: {
        confirmButton: 'swal-confirm-delete'
      }
    });
  }

  /**
   * Validate QR data structure
   */
  isValidAttendanceQR(qrData) {
    return qrData && 
           (qrData.type === 'attendance_check' || qrData.type === 'attendance') &&
           (qrData.id || qrData.sessionId || qrData.qrCodeId);
  }

  /**
   * Check if QR code has expired
   */
  isExpired(qrData) {
    if (qrData.expiresAt) {
      return new Date(qrData.expiresAt) < new Date();
    }
    if (qrData.validUntil) {
      return new Date(qrData.validUntil) < new Date();
    }
    // If no expiration is set, consider it valid
    return false;
  }

  /**
   * Validate email format
   */
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Get user location
   */
  getUserLocation(timeout = 10000) {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('Geolocation is not supported'));
        return;
      }

      navigator.geolocation.getCurrentPosition(
        resolve,
        reject,
        {
          enableHighAccuracy: true,
          timeout: timeout,
          maximumAge: 60000 // 1 minute
        }
      );
    });
  }

  /**
   * Get device information
   */
  getDeviceInfo() {
    return {
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
      screenResolution: `${window.screen.width}x${window.screen.height}`,
      timestamp: new Date().toISOString()
    };
  }
}

// CSS for additional styling
const additionalCSS = `
  .swal-confirm-attendance {
    background: linear-gradient(45deg, #4caf50 30%, #66bb6a 90%) !important;
    border: none !important;
    box-shadow: 0 3px 5px 2px rgba(76, 175, 80, 0.3) !important;
    color: white !important;
    font-weight: 600 !important;
    border-radius: 8px !important;
    padding: 12px 24px !important;
    transition: all 0.3s ease !important;
    font-size: 16px !important;
  }

  .swal-confirm-attendance:hover {
    background: linear-gradient(45deg, #388e3c 30%, #4caf50 90%) !important;
    box-shadow: 0 4px 8px 3px rgba(76, 175, 80, 0.4) !important;
    transform: translateY(-1px) !important;
  }

  .swal-success-button {
    background: linear-gradient(45deg, #2196f3 30%, #42a5f5 90%) !important;
    border: none !important;
    box-shadow: 0 3px 5px 2px rgba(33, 150, 243, 0.3) !important;
    color: white !important;
    font-weight: 600 !important;
    border-radius: 8px !important;
    padding: 12px 24px !important;
    font-size: 16px !important;
  }

  .swal2-popup .swal2-styled:focus {
    box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.3) !important;
  }

  /* Form input focus states */
  .swal2-popup input:focus, .swal2-popup textarea:focus {
    border-color: #2196f3 !important;
    outline: none !important;
    box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1) !important;
  }

  /* Checkbox styling */
  .swal2-popup input[type="checkbox"] {
    accent-color: #4caf50;
  }
`;

// Inject CSS
if (typeof document !== 'undefined') {
  const style = document.createElement('style');
  style.textContent = additionalCSS;
  document.head.appendChild(style);
}

// Export the class
export default QRAttendanceModal;
